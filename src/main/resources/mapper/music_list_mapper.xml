<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mypractice.dao.SqlMusicListDao">
    <resultMap id="MusicListOutMap" type="musicList">
        <id property="id" column="pk_id"/>
        <result property="name" column="list_name"/>
        <result property="musicCount" column="music_count"/>
        <result property="isBanned" column="is_banned"/>
        <result property="description" column="list_description"/>
        <result property="createTime" column="create_time"/>
        <result property="likeCount" column="like_count"/>
        <result property="coverUrl" column="cover_url"/>
        <association property="author" javaType="user">
            <id column="author_id" property="id"/>
            <result column="idx_user_name" property="userName"/>
        </association>
        <collection property="music" ofType="music">
            <id column="music_id" property="id"/>
            <result column="music_name" property="musicName"/>
            <result column="singer_name" property="singerName"/>
        </collection>
    </resultMap>
    <insert id="addMusicList">
        INSERT INTO tb_music_list(pk_id, list_name, music_count, author_id, is_banned, list_description,
                                  create_time, like_count)
        VALUES (#{musicList.id}, #{musicList.name}, #{musicList.musicCount}, #{musicList.author.id},
                #{musicList.IN_USE},
                #{musicList.description}, #{musicList.createTime}, 0)
    </insert>
    <delete id="deleteMusicList">
        DELETE
        FROM tb_music_list
        WHERE pk_id = #{musicList.id};
        DELETE
        FROM tb_music_list_content
        WHERE music_list_id = #{musicList.id};
    </delete>
    <update id="updateMusicList">
        UPDATE tb_music_list
        <set>
            pk_id = #{musicList.id}
            <if test="musicList.name!=null">
                ,list_name = #{musicList.name}
            </if>
            <if test="musicList.description!=null">
                ,list_description = #{musicList.description}
            </if>
        </set>
        WHERE pk_id = #{musicList.id}
    </update>
    <select id="selectMusicListById" resultMap="MusicListOutMap">
        SELECT tb_music_list.*,
               tb_user.idx_user_name,
               tb_music.pk_id music_id,
               tb_music.music_name,
               tb_music.singer_name
        FROM tb_music_list
                 LEFT JOIN tb_user ON tb_music_list.author_id = tb_user.pk_id
                 LEFT JOIN (tb_music INNER JOIN tb_music_list_content ON tb_music.pk_id = tb_music_list_content.music_id)
                           ON tb_music_list.pk_id = tb_music_list_content.music_list_id
        WHERE tb_music_list.pk_id = #{musicList.id}
    </select>
    <select id="selectMusicListByAuthorId" resultMap="MusicListOutMap">
        SELECT pk_id, list_name, music_count, cover_url
        FROM tb_music_list
        WHERE tb_music_list.author_id = #{musicList.author.id}
          AND is_banned = #{musicList.IN_USE}
          AND tb_music_list.pk_id > #{lastIndex} LIMIT ${@com.example.mypractice.commons.constant.Others@PAGE_SIZE}
    </select>
    <select id="selectMusicListCountByAuthorId" resultType="int">
        SELECT COUNT(*)
        FROM tb_music_list
        WHERE author_id = #{musicList.author.id}
          AND is_banned = #{musicList.IN_USE}
    </select>
    <select id="selectAllMusicList" resultMap="MusicListOutMap">
        SELECT tb_music_list.*,
               tb_user.idx_user_name
        FROM tb_music_list
                 LEFT JOIN tb_user ON tb_music_list.author_id = tb_user.pk_id
        WHERE tb_music_list.pk_id > #{lastIndex} LIMIT ${@com.example.mypractice.commons.constant.Others@PAGE_SIZE}
    </select>
    <select id="selectAllMusicListCount" resultType="int">
        SELECT COUNT(*)
        FROM tb_music_list
    </select>
    <update id="banMusicList">
        UPDATE tb_music_list
        SET is_banned = #{musicList.BANNED}
    </update>
    <update id="unsealMusicList">
        UPDATE tb_music_list
        SET is_banned = #{musicList.IN_USE}
    </update>
    <insert id="addListToLike">
        INSERT INTO tb_user_like_list(pk_user_id,pk_list_id)
        VALUES
        <foreach collection="listId" item="id" separator=",">
            (#{userId},#{id})
        </foreach>
    </insert>
    <delete id="deleteListFromLike">
        DELETE FROM tb_user_like_list
        WHERE pk_list_id IN (
        <foreach collection="listId" item="id" separator=",">
            #{id}
        </foreach>
        )
        AND pk_user_id = #{userId}
    </delete>
    <select id="selectListFromLike" resultMap="MusicListOutMap">
        SELECT tb_music_list.pk_id, list_name, music_count, author_id, idx_user_name, cover_url
        FROM tb_music_list
                 INNER JOIN tb_user ON tb_music_list.author_id = tb_user.pk_id
                 INNER JOIN tb_user_like_list ON tb_user_like_list.pk_list_id = tb_music_list.pk_id
        WHERE tb_user_like_list.pk_user_id = #{userId}
          AND tb_user_like_list.pk_list_id > #{lastIndex} LIMIT ${@com.example.mypractice.commons.constant.Others@PAGE_SIZE}
    </select>
    <select id="selectListCountFromLike" resultType="int">
        SELECT COUNT(*)
        FROM tb_user_like_list
        WHERE pk_user_id = #{userId}
    </select>
    <select id="ifLiked" resultType="int">
        SELECT COUNT(*)
        FROM tb_user_like_list
        WHERE pk_user_id = #{userId}
          AND pk_list_id = #{listId}
    </select>
    <select id="ifCreated" resultType="int">
        SELECT COUNT(*)
        FROM tb_music_list
        WHERE author_id = #{userId}
          AND pk_id = #{listId}
    </select>
    <update id="updateMusicListLikeCount">
        <foreach collection="counts.entrySet()" item="count" index="id" separator=";">
            UPDATE tb_music_list
            SET like_count = like_count+#{count}
            WHERE pk_id = #{id}
        </foreach>
    </update>
    <update id="updateMusicCount">
        <foreach collection="counts.entrySet()" item="count" index="id" separator=";">
            UPDATE tb_music_list
            SET music_count = music_count+#{count}
            WHERE pk_id = #{id}
        </foreach>
    </update>
    <update id="updateCoverUrl">
        <foreach collection="urls.entrySet()" item="url" index="id" separator=";">
            UPDATE tb_music_list
            SET cover_url = #{url}
            WHERE pk_id = #{id}
        </foreach>
    </update>
</mapper>